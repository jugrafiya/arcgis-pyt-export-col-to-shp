# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [ExportColumnValuesToShapefiles, ExportDomainValuesToShapefiles]class ExportColumnValuesToShapefiles(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "ExportColumnValuesToShapefiles"        self.description = "Export distinct column values to shapefiles"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #First Parameter (Input layer)        param0 = arcpy.Parameter(            displayName = "Input Features",            name= "in_features",            datatype="GPFeatureLayer",            parameterType="Required",            direction= "Input")        #Second Parameter (Select Field)        param1 = arcpy.Parameter(            displayName="Select Field",            name= "select_field",            datatype="Field",            parameterType= "Required",            direction="Input")        param1.parameterDependencies = [param0.name]        #Third Parameter (Output Folder)        param2 = arcpy.Parameter(            displayName="Output Folder",            name="out_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        params = [param0, param1, param2]        return params                    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        in_features = parameters[0].valueAsText        outputFolder = parameters[2].valueAsText        fieldName = parameters[1].valueAsText        messages.addMessage('Reading File: ' + in_features)        with arcpy.da.SearchCursor(in_features, [fieldName]) as cursor:            distinctValues = sorted({row[0] for row in cursor})        messages.addMessage('Distinct column values: ')        for distinctValue in distinctValues:            messages.addMessage(distinctValue)            arcpy.conversion.FeatureClassToFeatureClass(in_features, outputFolder, distinctValue+ ".shp", fieldName + " = '{}'".format(distinctValue))                    return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass ExportDomainValuesToShapefiles(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "ExportDomainValuesToShapefiles"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #First Parameter (Input layer)        param0 = arcpy.Parameter(            displayName = "Input Features",            name= "in_features",            datatype="GPFeatureLayer",            parameterType="Required",            direction= "Input")        #Second Parameter (Select Field)        param1 = arcpy.Parameter(            displayName="Select Field",            name= "select_field",            datatype="Field",            parameterType= "Required",            direction="Input")        param1.parameterDependencies = [param0.name]        #Third Parameter (Workspace / .gdb )        param2 = arcpy.Parameter(            displayName="Workspace (.gdb) To fetch domain info",            name="in_workspace",            datatype="DEWorkspace",            parameterType = "Required",            direction="Input")        #Last Parameter (Output Folder)        param3 = arcpy.Parameter(            displayName="Output Folder",            name="out_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input")        params = [param0, param1, param2, param3]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        in_features = parameters[0].valueAsText        fieldName = parameters[1].valueAsText        workspace = parameters[2].valueAsText        outputFolder = parameters[3].valueAsText                        messages.addMessage('Reading File: ' + in_features)        domain = ""        fields = arcpy.ListFields(in_features,fieldName)        for field in fields:            if field.name == fieldName:                domain = field.domain        messages.addMessage('Domain: '+ domain)        domain_dict = {}        if domain != "":            domains = arcpy.da.ListDomains(workspace)            for _domain in domains:                if _domain.name == domain:                    coded_values = _domain.codedValues                    for val, desc in coded_values.items():                        messages.addMessage('{0} : {1}'.format(val, desc))                        domain_dict[val] = desc                                with arcpy.da.SearchCursor(in_features, [fieldName]) as cursor:            distinctValues = sorted({row[0] for row in cursor})        messages.addMessage('Distinct column values: ')        for distinctValue in distinctValues:            messages.addMessage(distinctValue)            arcpy.conversion.FeatureClassToFeatureClass(in_features, outputFolder, domain_dict[distinctValue]+ ".shp", fieldName + " = '{}'".format(distinctValue))            #Update domain columns to description in created shp            fc=outputFolder+"/"+domain_dict[distinctValue]+ ".shp"            fields=[fieldName]            with arcpy.da.UpdateCursor(fc,fields) as cursor:                for row in cursor:                    row[0] = domain_dict[row[0]]                    cursor.updateRow(row)                    return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return